.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Microarray::File::Data::BlueFuse 3"
.TH Microarray::File::Data::BlueFuse 3 "2008-08-05" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Microarray::File::Data::BlueFuse \- A Perl module for managing BlueFuse 'output' files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Microarray::File::Data::BlueFuse;
\&        my $data_file = bluefuse_file\->new("/file.csv");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Microarray::File::Data::BlueFuse is an object-oriented Perl module for managing microarray files created by BlueGnome's (<http://www.bluegnome.co.uk/>) 'BlueFuse' software. It inherits from Microarray::File, and maps data fields in a BlueFuse 'output' data file to those used by Microarray::File::Data.
.SH "METHODS"
.IX Header "METHODS"
.Sh "General Header Information"
.IX Subsection "General Header Information"
.IP "\fBanalysis_software\fR, \fBbuild\fR, \fBexperiment\fR, \fBframe_ch1\fR, \fBframe_ch2\fR, \fBgal_file\fR, \fBclone_file\fR, \fBclone_text\fR, \fBchannel1_image_file\fR, \fBchannel2_image_file\fR" 4
.IX Item "analysis_software, build, experiment, frame_ch1, frame_ch2, gal_file, clone_file, clone_text, channel1_image_file, channel2_image_file"
These methods all return the relevant header information as a scalar.
.IP "\fBconfidence_flag_range\fR, \fBconfidence_flag_range($flag)\fR" 4
.IX Item "confidence_flag_range, confidence_flag_range($flag)"
Returns the confidence estimate range for each confidence flag. Passing a flag as an argument returns \f(CW\*(C`($start,$end)\*(C'\fR for that flag. Alternatively if a list is requested it will return each division, starting at 0 and ending at 1, else will return a hashref of keys A to E and the range as an arrayref \f(CW\*(C`[$start,$end]\*(C'\fR.
.IP "\fBslide_barcode\fR" 4
.IX Item "slide_barcode"
Odd \- BlueFuse does not return the barcode in the file header. So it has to guess it using the data_file method \f(CW\*(C`guess_barcode()\*(C'\fR. Have asked the nice people at BlueGnome if they can fix this, and apparently they might, one day.
.Sh "Array \s-1QC\s0 Header Information"
.IX Subsection "Array QC Header Information"
.IP "\fBconfidence_flag_percen\fR, \fBconfidence_flag_percen($flag)\fR" 4
.IX Item "confidence_flag_percen, confidence_flag_percen($flag)"
Returns the percentage of spots with each confidence flag. Passing a flag as an argument returns only the value for that flag. Alternatively if a list is requested it will return a list of values for flags A to E, else will return a hashref of keys A to E and their respective flag values.
.IP "\fBlog_ratio_sd\fR, \fBrep_median_sd\fR, \fBmean_ch1_amp\fR, \fBmean_ch2_amp\fR, \fBsbr_ch1\fR, \fBsbr_ch2\fR" 4
.IX Item "log_ratio_sd, rep_median_sd, mean_ch1_amp, mean_ch2_amp, sbr_ch1, sbr_ch2"
These methods all return the relevant header information as a scalar.
.Sh "Spot Information"
.IX Subsection "Spot Information"
Pass a spot index to any of these methods to retrieve the relevant value for that spot.
.IP "\fBblock_row\fR, \fBblock_col\fR, \fBspot_row\fR, \fBspot_col\fR" 4
.IX Item "block_row, block_col, spot_row, spot_col"
The \s-1ROW\s0, \s-1COL\s0, \s-1SUBGRIDROW\s0 and \s-1SUBGRIDCOL\s0 columns \- describing the grid location of the spot.
.IP "\fBfeature_id\fR, \fBsynonym_id\fR" 4
.IX Item "feature_id, synonym_id"
The \s-1NAME\s0 and \s-1ID\s0 columns \- the unique identifiers of each spotted feature.
.IP "\fBconfidence\fR, \fBflag_id\fR, \fBman_excl\fR, \fBauto_excl\fR" 4
.IX Item "confidence, flag_id, man_excl, auto_excl"
The \s-1CONFIDENCE\s0, \s-1FLAG\s0, \s-1MAN\s0 \s-1EXCL\s0 and \s-1AUTO\s0 \s-1EXCL\s0 columns. Flag confidence estimates can be returned separately (see above).
.IP "\fBch1_mean_f\fR, \fBch2_mean_f\fR, \fBchannel1_signal\fR, \fBchannel2_signal\fR" 4
.IX Item "ch1_mean_f, ch2_mean_f, channel1_signal, channel2_signal"
Actually return the \s-1AMPCH1\s0 and \s-1AMPCH2\s0 columns \- the spot signal. The \f(CW\*(C`ch_mean_f\*(C'\fR methods are provided for compatibility with other modules which calculate signal and background separately, and in which the calculated signal is returned using the methods \f(CW\*(C`channel1_signal\*(C'\fR and \f(CW\*(C`channel2_signal\*(C'\fR. As a result, the methods \f(CW\*(C`ch1_median_b\*(C'\fR and \f(CW\*(C`ch2_median_b\*(C'\fR are also provided in this module, but will always return '0'. However, other values for signal and background (such as \f(CW\*(C`snr, median_f, sd_f, mean_b\*(C'\fR and \f(CW\*(C`sd_b\*(C'\fR) are not returned and will generate an error.
.IP "\fBx_pos\fR, \fBy_pos\fR" 4
.IX Item "x_pos, y_pos"
The \s-1PELROW\s0 and \s-1PELCOL\s0 columns \- the spot coordinates, returning the top/left position of the spot.
.IP "\fBchannel1_quality\fR, \fBchannel2_quality\fR" 4
.IX Item "channel1_quality, channel2_quality"
The P \s-1ON\s0 \s-1CH1\s0 and P \s-1ON\s0 \s-1CH2\s0 columns \- estimates of the baysian probability that a biological signal is present in each channel
.IP "\fBspot_diameter\fR, \fBuniformity\fR, \fBcircularity\fR, \fBgrid_offset\fR, \fBquality\fR" 4
.IX Item "spot_diameter, uniformity, circularity, grid_offset, quality"
The 2*(\s-1RADIUS\s0), \s-1UNIFORMITY\s0, \s-1CIRCULARITY\s0, \s-1QUALITY\s0 and \s-1GRID\s0 \s-1OFFSET\s0 columns.
.SH "FUTURE DEVELOPMENT"
.IX Header "FUTURE DEVELOPMENT"
At some point I plan to make this compatible with all of the BlueFuse file formats. While it has currently only been tested with the 'output' format, it might work with the other files.
.SH "TESTING"
.IX Header "TESTING"
This distribution does not include a data file for testing purposes, since the one used for the test is very large. If you would like to run the full test you can download the file at <http://www.instituteforwomenshealth.ucl.ac.uk/trl/pipeline/download.html>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Microarray, Microarray::File, Microarray::File::Data
.SH "AUTHOR"
.IX Header "AUTHOR"
Christopher Jones, Gynaecological Cancer Research Laboratories, Institute for Women's Health, University College London.
.PP
<http://www.instituteforwomenshealth.ucl.ac.uk/AcademicResearch/Cancer/trl>
.PP
c.jones@ucl.ac.uk
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2008 by Christopher Jones, University College London
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
