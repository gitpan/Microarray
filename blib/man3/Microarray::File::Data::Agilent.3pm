.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Microarray::File::Data::Agilent 3"
.TH Microarray::File::Data::Agilent 3 "2008-08-05" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Microarray::File::Data::Agilent \- A Perl module for managing Agilent microarray files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Microarray::File::Data::Agilent;
\&
\&        my $data_file = agilent_file\->new("/file.csv");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Microarray::File::Data::Agilent is an object-oriented Perl module for managing microarray files created by Agilent Microarray Scanner software. It inherits from Microarray::File, and maps data fields in an Agilent data file to those used by Microarray::File::Data.
.SH "METHODS"
.IX Header "METHODS"
.Sh "Header information"
.IX Subsection "Header information"
The following methods return the corresponding fields from the file header;
.IP "\fBchannel1_name\fR, \fBchannel2_name\fR" 4
.IX Item "channel1_name, channel2_name"
Return 'r' and 'g' respectively.
.IP "\fBslide_barcode\fR" 4
.IX Item "slide_barcode"
Returns 'FeatureExtractor_Barcode'.
.IP "\fBgal_file\fR" 4
.IX Item "gal_file"
Returns 'FeatureExtractor_DesignFileName'.
.IP "\fBanalysis_software\fR" 4
.IX Item "analysis_software"
This should return something about the version of the software, but at the moment just returns 'Agilent'.
.IP "\fBscanner\fR" 4
.IX Item "scanner"
Returns 'Scan_ScannerName'.
.Sh "Spot data"
.IX Subsection "Spot data"
Pass a spot index\-1 to return the relevant value for the respective fields. For any method starting with 'ch1_' or 'channel1' (returning fields starting with 'r', i.e. the red channel) there is a corresponding method starting with 'ch2_' or 'channel2' (returning fields starting with 'g' i.e. the green channnel).
.IP "\fBspot_index\fR, \fBspot_row\fR, \fBspot_col\fR, \fBx_pos\fR, \fBy_pos\fR" 4
.IX Item "spot_index, spot_row, spot_col, x_pos, y_pos"
The 'FeatureNum', 'Row', 'Col', 'PositionX' and 'PositionY' fields.
.IP "\fBfeature_id\fR, \fBsynonym_id\fR" 4
.IX Item "feature_id, synonym_id"
The 'GeneName' and 'SystematicName' fields.
.IP "\fBch1_spot_pixels\fR, \fBch1_bg_pixels\fR" 4
.IX Item "ch1_spot_pixels, ch1_bg_pixels"
The 'rNumPix' and 'rBGNumPix' fields.
.IP "\fBflag_id\fR" 4
.IX Item "flag_id"
Returns the 'IsManualFlag' field
.IP "\fBch1_mean_f\fR, \fBch1_median_f\fR, \fBch1_sd_f\fR, \fBch1_mean_b\fR, \fBch1_median_b\fR, \fBch1_sd_b\fR" 4
.IX Item "ch1_mean_f, ch1_median_f, ch1_sd_f, ch1_mean_b, ch1_median_b, ch1_sd_b"
Return the 'rMeanSignal', 'rMedianSignal', 'rPixSDev', 'rBGMeanSignal', 'rBGMedianSignal' and 'rBGPixSDev' fields.
.IP "\fBchannel1_quality\fR, \fBchannel1_sat_pix\fR" 4
.IX Item "channel1_quality, channel1_sat_pix"
Return the 'rPValFeatEqBG' and 'rNumSatPix' fields.
.IP "\fBchannel1_sat\fR" 4
.IX Item "channel1_sat"
Calculates the percentage saturation for a spot, from the \fIchannel1_sat_pix()\fR and \fIch1_spot_pixels()\fR values.
.IP "\fBchannel1_signal\fR" 4
.IX Item "channel1_signal"
Returns the 'rProcessedSignal' field
.IP "\fBchannel1_snr\fR" 4
.IX Item "channel1_snr"
Calculates the signal to noise ratio as median spot signal/S.D. of the background. There's probably a field from the data file that should be used here instead. Let the author know if it bothers you!
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Microarray, Microarray::File, Microarray::File::Data
.SH "AUTHOR"
.IX Header "AUTHOR"
Christopher Jones, Gynaecological Cancer Research Laboratories, Institute for Women's Health, University College London.
.PP
<http://www.instituteforwomenshealth.ucl.ac.uk/AcademicResearch/Cancer/trl>
.PP
c.jones@ucl.ac.uk
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2008 by Christopher Jones, University College London
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
