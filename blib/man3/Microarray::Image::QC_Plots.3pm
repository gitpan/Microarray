.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Microarray::Image::QC_Plots 3"
.TH Microarray::Image::QC_Plots 3 "2008-08-05" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Microarray::Image::QC_Plots \- A Perl module for creating microarray QC/QA plots
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&        use Microarray::Image::QC_Plots;
\&        use Microarray::File::Data;
\&
\&        my $oData_File = data_file\->new($data_file);
\&        my $oMA_Plot = ma_plot\->new($oData_File);
\&        my $ma_plot_png = $oMA_Plot\->make_plot; 
\&
\&        open (PLOT,'>ma_plot.png');
\&        print PLOT $ma_plot_png;
\&        close PLOT;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Microarray::Image::QC_Plots is an object-oriented Perl module for creating microarray \s-1QC/QA\s0 data plots from a scan data file, using the \s-1GD\s0 module and image library. A number of different plot types are supported, including \s-1MA/RI\s0, intensity scatter, intensity heatmap and log2 heatmap.
.PP
Mac Os X users beware \- for some unknown reason, Apple's Preview application does not render the scatter or \s-1MA\s0 plots properly.
.SH "QC/QA PLOT TYPES"
.IX Header "QC/QA PLOT TYPES"
There are several plots for viewing basic microarray data for \s-1QC/QA\s0 purposes. Most of the parameters for these plots are the same, and only the class name used to create the plot object differs from one plot to another.
.Sh "Standard Data Plots"
.IX Subsection "Standard Data Plots"
.IP "\fBma_plot\fR" 4
.IX Item "ma_plot"
See the \s-1SYNOPSIS\s0 for all there is to know about how to create an \s-1MA\s0 plot. To create any of the other plot types, just append \f(CW'ma_plot'\fR in the above example with one of the class names listed below.
.IP "\fBri_plot\fR" 4
.IX Item "ri_plot"
An \s-1RI\s0 plot is basically identical to an \s-1MA\s0 plot \- at least in appearance.
.IP "\fBintensity_scatter\fR" 4
.IX Item "intensity_scatter"
This is a plot of channel 1 signal vs channel 2 signal.
.Sh "Heatmaps"
.IX Subsection "Heatmaps"
.IP "\fBintensity_heatmap\fR" 4
.IX Item "intensity_heatmap"
An image of the slide, using a black\->white rainbow colour gradient to indicate the signal intensity across the array. Uses channel 1 as the signal by default, but the channel can be changed by setting the \f(CW\*(C`plot_channel\*(C'\fR parameter in the call to \f(CW\*(C`make_plot()\*(C'\fR.
.Sp
.Vb 2
\&        my $oInt_Heatmap = intensity_heatmap\->new($oData_File);
\&        my $int_heatmap_png = $oInt_Heatmap\->make_plot(plot_channel=>2);
.Ve
.IP "\fBlog2_heatmap\fR" 4
.IX Item "log2_heatmap"
An image of the slide using a red\->yellow\->green colour gradient to indicate the Log2 of the signal ratio across the array.
.PP
One difference between heatmaps and other plots is in their implementation of the plot scale. This is calculated dynamically in order to generate the best looking image of the array, and requires the dimensions of the array in terms of the number of spots in the x and y axes. If you are using a data file format that returns those values in its header information (such as a Scanarray file, using the Quantarray module) then the scale will be calculated automatically. If BlueFuse files are sorted such that the last data row has the highest block/spot row/column number, then again the scale can be calculated automatically. However, for GenePix files, you will have to pass these values to the \fImake_plot()\fR method (adding extra spots for block padding where appropriate);
.PP
.Vb 2
\&        my $oLog2_Heatmap = log2_heatmap\->new($oData_File);
\&        my $log_heatmap_png = $oLog2_Heatmap\->make_plot(x_spots=>108, y_spots=>336);
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Microarray, Microarray::Image, Microarray::File, Microarray::File::Data_File
.SH "AUTHOR"
.IX Header "AUTHOR"
James Morris, Gynaecological Cancer Research Laboratories, \s-1UCL\s0 \s-1EGA\s0 Institute for Women's Health, University College London.
.PP
<http://www.instituteforwomenshealth.ucl.ac.uk/AcademicResearch/Cancer/trl>
.PP
james.morris@ucl.ac.uk
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2008 by James Morris, University College London
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
