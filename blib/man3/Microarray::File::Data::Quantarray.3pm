.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Microarray::File::Data::Quantarray 3"
.TH Microarray::File::Data::Quantarray 3 "2008-08-05" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Microarray::File::Data::Quantarray \- A Perl module for managing Perkin Elmer 'Scanarray' microarray files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Microarray::File::Data::Quantarray;
\&
\&        my $data_file = quantarray_file\->new("/file.csv");
\&        my $ch1_image = quantarray_image\->new("/image1.tif");
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Microarray::File::Data::Quantarray is an object-oriented Perl module for managing microarray files created by Perkin Elmer's 'Scanarray' software. It inherits from Microarray::File, and maps data fields in a Scanarray data file to those used by Microarray::File::Data, as well as extracting header information from image files. The data file and image file headers that are created by Scanarray are richly annotated with a lot of useful information about your scans, allowing automated file handling that is impossible with other formats.
.SH "METHODS"
.IX Header "METHODS"
.Sh "quantarray_file methods"
.IX Subsection "quantarray_file methods"
In case you didn't guess \- where a method exists for \*(L"channel1\*(R" in the following methods, there is an equivalent method for \*(L"channel2\*(R".
.PP
\fIGeneral methods \- typically retrieving information from the header\fR
.IX Subsection "General methods - typically retrieving information from the header"
.IP "\fBpixel_size\fR" 4
.IX Item "pixel_size"
Measured in micrometers.
.IP "\fBchannel1_name\fR" 4
.IX Item "channel1_name"
i.e. Cyanine 3, or Cyanine 5. This comes from Scanarray's fluorochrome list, and represents whatever fluor you chose in the scan set up.
.IP "\fBchannel1_image_file\fR" 4
.IX Item "channel1_image_file"
The full path of the image file when saved by Scanarray.
.IP "\fBgal_file\fR" 4
.IX Item "gal_file"
The full path of the \s-1GAL\s0 file, when/if imported by Scanarray during data extraction.
.IP "\fBuser_comment\fR" 4
.IX Item "user_comment"
No idea where this comes from. But its there in the data file.
.IP "\fBarray_columns\fR, \fBarray_rows\fR" 4
.IX Item "array_columns, array_rows"
Number of columns and rows of blocks on the array
.IP "\fBspot_columns\fR, \fBspot_rows\fR" 4
.IX Item "spot_columns, spot_rows"
Number of columns and rows of spots in each block
.PP
And other methods that don't need any explanation;
.IP "\fBanalysis_software\fR" 4
.IX Item "analysis_software"
.PD 0
.IP "\fBnum_channels\fR" 4
.IX Item "num_channels"
.IP "\fBslide_barcode\fR" 4
.IX Item "slide_barcode"
.IP "\fBchannel1_pmt\fR, \fBchannel1_laser\fR" 4
.IX Item "channel1_pmt, channel1_laser"
.PD
.PP
\fISpot methods\fR
.IX Subsection "Spot methods"
.PP
Pass the data row index to these methods to return information for a particular spot. The first row of data is index 0.
.IP "\fBblock_row, block_col, spot_row, spot_col, spot_index\fR" 4
.IX Item "block_row, block_col, spot_row, spot_col, spot_index"
There is no 'block number' field in Scanarray files, so all coordinates are at row/column level.
.IP "\fBfeature_id\fR, \fBsynonym_id\fR" 4
.IX Item "feature_id, synonym_id"
The 'Name' and '\s-1ID\s0' columns respectively.
.IP "\fBx_pos\fR, \fBy_pos\fR" 4
.IX Item "x_pos, y_pos"
Spot centre location in pixels, from the top-left of the image.
.IP "\fBfootprint\fR" 4
.IX Item "footprint"
You'd better look this one up... but its something like how far away the spot centre is, compared to where it was expected to be.
.IP "\fBflag_id\fR" 4
.IX Item "flag_id"
The flag associated with the spot.
.IP "\fBch1_median_f, ch1_mean_f, ch1_sd_f\fR" 4
.IX Item "ch1_median_f, ch1_mean_f, ch1_sd_f"
Median, mean and \s-1SD\s0 values for the fluorescence measurements of spot pixels.
.IP "\fBch1_median_b, ch1_mean_b, ch1_sd_b\fR" 4
.IX Item "ch1_median_b, ch1_mean_b, ch1_sd_b"
Median, mean and \s-1SD\s0 values for the fluorescence measurements of background pixels.
.IP "\fBch1_b1sd, channel1_quality, channel1_sat\fR" 4
.IX Item "ch1_b1sd, channel1_quality, channel1_sat"
The percent of spot pixels 1 \s-1SD\s0 above background, percent of spot pixels 2 \s-1SD\s0 above background, and percent of spot pixels that are saturated.
.IP "\fBchannel1_snr\fR" 4
.IX Item "channel1_snr"
Scanarray calculates signal to noise ratio as the median signal/background \s-1SD\s0.
.Sh "quantarray_image methods"
.IX Subsection "quantarray_image methods"
.IP "\fBimage_barcode\fR" 4
.IX Item "image_barcode"
Returns the barcode, if there is only one, or if there is one at each end of the array and they are identical. Otherwise, if there are two barcodes that are different it will die with an error.
.IP "\fBimage_lbarcode\fR" 4
.IX Item "image_lbarcode"
Returns the lower barcode
.IP "\fBimage_ubarcode\fR" 4
.IX Item "image_ubarcode"
Returns the upper barcode
.IP "\fBprotocol_name, protocol_id, protocol_description\fR" 4
.IX Item "protocol_name, protocol_id, protocol_description"
These methods return details of the Scanarray protocol used to scan and extract array data
.IP "\fBimage_resolution\fR" 4
.IX Item "image_resolution"
Pixel size in microns
.IP "\fBfluor_name, fluor_id, fluor_colour_name, fluor_description, fluor_excitation, fluor_emission\fR" 4
.IX Item "fluor_name, fluor_id, fluor_colour_name, fluor_description, fluor_excitation, fluor_emission"
These methods return details of the fluorochrome specified in the scan protocol and visualised in this image. Not necessarily the fluorochrome used in the experiment!
.IP "\fBlaser_id\fR, \fBfilter_id\fR" 4
.IX Item "laser_id, filter_id"
The Scanarray IDs of the filter and laser used in the scan
.IP "\fBpmt_gain\fR, \fBlaser_power\fR" 4
.IX Item "pmt_gain, laser_power"
Percentage values specified in the scan protocol
.IP "\fBuser_comment\fR" 4
.IX Item "user_comment"
User comment can contain the slide barcode
.PP
\fISetting a new barcode\fR
.IX Subsection "Setting a new barcode"
.PP
You can change the value of a barcode in the header information. You can't overwrite the original file, but you can write these header changes to a new image file. This is achieved using the Image::ExifTool module.
.PP
.Vb 1
\&        my $success = $image\->set_new_barcode('new barcode','/new_file.tif');
.Ve
.PP
The returned values are; 1=write success, 2=write success no changes, 0=write error. If you need to change any other values, you can do by manipulating the embedded Image::ExifTool object.
.PP
.Vb 1
\&        my $exiftool = $image\->get_exiftool_object;
.Ve
.SH "TESTING"
.IX Header "TESTING"
This distribution does not include a data file for testing purposes, since the one used for the test is very large. If you would like to run the full test you can download the file at <http://www.instituteforwomenshealth.ucl.ac.uk/trl/pipeline/download.html>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Microarray, Microarray::File, Microarray::File::Data, Image::ExifTool
.SH "AUTHOR"
.IX Header "AUTHOR"
Christopher Jones, Gynaecological Cancer Research Laboratories, Institute for Women's Health, University College London.
.PP
<http://www.instituteforwomenshealth.ucl.ac.uk/AcademicResearch/Cancer/trl>
.PP
c.jones@ucl.ac.uk
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2008 by Christopher Jones, University College London
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
