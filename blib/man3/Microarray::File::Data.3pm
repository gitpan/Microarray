.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.05)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Microarray::File::Data 3"
.TH Microarray::File::Data 3 "2008-08-05" "perl v5.8.8" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Microarray::File::Data \- An object oriented Perl module describing microarray data files
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&        use Microarray::File::Data;
\&
\&        my $oFile = data_file\->new('/results.txt');
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Microarray::File::Data provides methods for retrieving data from microarray data file objects.
.SH "METHODS"
.IX Header "METHODS"
.Sh "Object creation"
.IX Subsection "Object creation"
If you know the type of data file you are dealing with, then you should use the appropriate file module. However, if for some reason you don't know you can create a \f(CW\*(C`data_file\*(C'\fR object and the module will attempt to create a file object of the correct type for you. This depends on the correct Plug-In module being present. If you write your own Plug-In module, you'll need to include a class-level method 'auto_data_file' in your module, which returns the package name of the file object and a search term that will identify an unknown file as the correct type.
.Sh "Spot object methods"
.IX Subsection "Spot object methods"
\fISpot object creation\fR
.IX Subsection "Spot object creation"
.PP
The module can create individual Microarray::Spot objects for you, either on-mass, or individually as you want them. The overhead for doing this is not huge, so if you have replicates that you want to handle using the Microarray::Reporter module, this is a handy way to fill the reporter container.
.PP
.Vb 1
\&        $oFile\->spot_object(123);                               # sets and gets object for spot index 123
\&
\&        $oFile\->set_spot_objects;                               # sets all spot objects
\&        my $oSpot = $oFile\->spot_object(1234);  # spot object for spot index 1234
.Ve
.IP "\fBset_spot_objects\fR" 4
.IX Item "set_spot_objects"
Creates spot objects for all spots.
.IP "\fBspot_object\fR" 4
.IX Item "spot_object"
Pass a spot index to this method to return the relevant spot object. If \f(CW\*(C`set_spot_objects\*(C'\fR has not been called, this will create and return only this object.
.IP "\fBnumber_spots\fR" 4
.IX Item "number_spots"
Returns the total number of spot objects created by \f(CW\*(C`set_spot_objects()\*(C'\fR.
.IP "\fBget_spots\fR" 4
.IX Item "get_spots"
Returns the spot objects as an array, where each index of the array matches that of the spot. (Therefore there is not a spot at index[0], but instead this element holds the number of spots!)
.Sh "Other methods"
.IX Subsection "Other methods"
.IP "\fBimage_file_names\fR, \fBfluor_names\fR, \fBlaser_powers\fR, \fBpmt_voltages\fR" 4
.IX Item "image_file_names, fluor_names, laser_powers, pmt_voltages"
Returns the relevant values for each analysed channel as a list. Will only work for file types that return the relevant information (for instance, BlueFuse does not return laser/PMT information).
.IP "\fBguess_barcode\fR" 4
.IX Item "guess_barcode"
In the event that a barcode is not present in the data file, will parse the file name and assume that the first portion of the name (using an underscore or hyphen as a delimiter) is the barcode.
.IP "\fBnum_channels\fR" 4
.IX Item "num_channels"
Defaults to two in the event that a file type is used which does not return the number of channels.
.PP
And many other methods that need no explanation;
.IP "\fBanalysis_software, pixel_size, channel1_name, channel2_name, channel1_signal, channel2_signal, channel1_snr, channel2_snr, channel_quality, channel_sat, bad_flags\fR" 4
.IX Item "analysis_software, pixel_size, channel1_name, channel2_name, channel1_signal, channel2_signal, channel1_snr, channel2_snr, channel_quality, channel_sat, bad_flags"
Once again, not all file types will return the relevant information (BlueFuse does not return channel saturation or \s-1SNR\s0).
.SH "TESTING"
.IX Header "TESTING"
This distribution has been extensively tested, but does not include data files for testing purposes since they are very large. If you would like to run the full test you can download the files at <http://www.instituteforwomenshealth.ucl.ac.uk/trl/pipeline/download.html>.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Microarray, Microarray::File, Microarray::Spot
.SH "AUTHOR"
.IX Header "AUTHOR"
Christopher Jones, Gynaecological Cancer Research Laboratories, Institute for Women's Health, University College London.
.PP
<http://www.instituteforwomenshealth.ucl.ac.uk/AcademicResearch/Cancer/trl>
.PP
c.jones@ucl.ac.uk
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright 2008 by Christopher Jones, University College London
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.
